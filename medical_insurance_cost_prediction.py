# -*- coding: utf-8 -*-
"""Medical Insurance Cost Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ILrcOPvUgQA7ccqXoM9jJQ_2E6P5z5yk

## GROUO NO: 12
### GROUP MEMBERS NAME AND ID

---



---


1. Sazzad Hossen (2019-1-60-063)
2. Rabeya Islam Dola (2019-1-60-096)
3. MD. Tohidul Haque Sagar (2019-1-60-096)
4. Md. Azizul Hakim (2018-2-60-052)

---

---
"""

from google.colab import drive
drive.mount('/content/drive')

"""### Importing necessary libaries and functions

---


"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""### Data Collection & Analysis

---


"""

# loading the data from csv file to a Pandas DataFrame
df = pd.read_csv('insurance.csv')

# first 5 rows of the dataframe
df.head()

# number of rows and columns
df.shape

# checking for missing values
df.isnull().sum()

"""### Exploratory Data Analysis

---


"""

# statistical Measures of the dataset
df.describe()

#checking unique values
df.nunique()

# distribution of age value
sns.displot(df['age'])

# Gender column
plt.figure(figsize=(6,6))
sns.countplot(x='sex', data=df)
plt.title('Sex Distribution')
plt.show()

df['sex'].value_counts()

# bmi distribution
sns.displot(df['bmi'])

# children column
sns.displot(df['children'])

df['children'].value_counts()

# smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=df)
plt.title('smoker')
plt.show()

df['smoker'].value_counts()

# distribution of charges value
sns.displot(df['charges'])

#Visualize the relation between two variables
sns.pairplot(df)

sns.relplot(x='age', y='charges', hue = 'sex', data =df)

sns.relplot(x='age', y='charges', hue = 'smoker', data =df)

sns.relplot(x='age', y='charges', hue = 'region', data =df)

sns.relplot(x='bmi', y='charges', hue = 'smoker', data =df)

"""*Normal BMI Range is 18.5 to 24.9*"""

sns.relplot(x='bmi', y='charges', hue = 'sex', data =df)

sns.relplot(x='bmi', y='charges', hue = 'region', data =df)

sns.relplot(x='children', y='charges', hue = 'region', data =df)

sns.relplot(x='children', y='charges', data =df)

sns.relplot(x='age', y='charges', data =df, kind="line")

sns.relplot(x='bmi', y='charges', data =df, kind="line")

sns.relplot(x='children', y='charges', data =df, kind="line")

sns.catplot(x ="age", kind="box", data= df)

sns.catplot(x ="children", kind="box", data= df)

sns.set_style("whitegrid")
sns.catplot(x="age",y="charges",data=df,hue="smoker",kind="point")

sns.catplot(x="children",y="charges",data=df,kind="box")

sns.boxplot(x='bmi',data=df)

"""### Data Pre-Processing - encoding the categorical features

---


"""

# encoding sex column
df.replace({'sex':{'male':0,'female':1}}, inplace=True)

3 # encoding 'smoker' column
df.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

# encoding 'region' column
df.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

df

"""### Splitting the Features and Target

---


"""

X = df.drop(columns='charges', axis=1)
Y = df['charges']

X

"""### Splitting the data into Training data & Testing Data

---


"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

```
# This is formatted as code
```

### Linear Regression

---
"""

# loading the Linear Regression model
LR = LinearRegression()

LR.fit(X_train, Y_train)

"""### Model Evaluation

---


"""

# prediction on training data
LR_training_data_prediction =LR.predict(X_train)

import math

# R squared value
score_1 = metrics.r2_score(Y_train, LR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, LR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, LR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

# prediction on test data
LR_test_data_prediction =LR.predict(X_test)
# R squared value
score_1 = metrics.r2_score(Y_test, LR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, LR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, LR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""XGBoost Regressor

---


"""

from xgboost import XGBRegressor

# loading the model
XGBR = XGBRegressor()

# training the model with X_train
XGBR.fit(X_train, Y_train)

"""### Prediction on training data

---


"""

# accuracy for prediction on training data
XGBR_training_data_prediction = XGBR.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, XGBR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, XGBR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, XGBR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# accuracy for prediction on test data
XGBR_test_data_prediction = XGBR.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, XGBR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, XGBR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, XGBR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""*italicized text*### Lasso Regression

---


"""

from sklearn.linear_model import Lasso

# loading the lasso regression model
LASSO = Lasso()

LASSO.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Training data
LASSO_training_data_prediction = LASSO.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, LASSO_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, LASSO_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, LASSO_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Testing data
LASSO_test_data_prediction = LASSO.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, LASSO_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, LASSO_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, LASSO_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Random Forest Regresson

---


"""

from sklearn.ensemble import RandomForestRegressor

RFR = RandomForestRegressor(n_estimators=100)

# training the model
RFR.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Train Data
RFR_training_data_prediction = RFR.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, RFR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, RFR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, RFR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Test Data
RFR_test_data_prediction = RFR.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, RFR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, RFR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, RFR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""#Ridge Regression

---


"""

from sklearn.linear_model import Ridge

RR = Ridge(alpha=1)

# training the model
RR.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Train Data
RR_training_data_prediction = RR.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, RR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, RR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, RR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Test Data
RR_test_data_prediction = RR.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, RR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, RR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, RR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Decision Tree Regresson

---


"""

from sklearn.tree import DecisionTreeRegressor

DTR = DecisionTreeRegressor()

# training the model
DTR.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Train Data
DTR_training_data_prediction = DTR.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, DTR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, DTR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, DTR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Test Data
DTR_test_data_prediction = DTR.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, DTR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, DTR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, DTR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### KNN Model

---


"""

from sklearn import neighbors

KNN = neighbors.KNeighborsRegressor()

# training the model
KNN.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Train Data
KNN_training_data_prediction = KNN.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, KNN_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, KNN_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, KNN_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Test Data
KNN_test_data_prediction = KNN.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, KNN_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, KNN_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, KNN_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Support Vector Regression

---


"""

from sklearn.svm import SVR

SVR = SVR(kernel="linear")

SVR.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Train Data
SVR_training_data_prediction = SVR.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, SVR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, SVR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, SVR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Test Data
SVR_test_data_prediction = SVR.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, SVR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, SVR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, SVR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Gradient Boosting Regressor

---


"""

from sklearn.ensemble import GradientBoostingRegressor

GBR = GradientBoostingRegressor()
GBR.fit(X_train,Y_train)

"""### Prediction on training data

---


"""

# prediction on Train Data
GBR_training_data_prediction = GBR.predict(X_train)

# R squared value
score_1 = metrics.r2_score(Y_train, GBR_training_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_train, GBR_training_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_train, GBR_training_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on testing data

---


"""

# prediction on Test Data
GBR_test_data_prediction = GBR.predict(X_test)

# R squared value
score_1 = metrics.r2_score(Y_test, GBR_test_data_prediction)
#Mean_absolute_error
score_2 = metrics.mean_absolute_error(Y_test, GBR_test_data_prediction)
#Mean_squared_error
score_3 = metrics.mean_squared_error(Y_test, GBR_test_data_prediction)
print('R squared : ', score_1)
print('Mean Absolute Error : ', score_2)
print('Mean Squared Error : ', score_3)
print('Root Mean Squared Error : ', math.sqrt(score_3))

"""### Prediction on Training Data

---


"""

y_pred1 = LR.predict(X_train)
y_pred2 = XGBR.predict(X_train)
y_pred3 = LASSO.predict(X_train)
y_pred4 = RFR.predict(X_train)
y_pred5 = RR.predict(X_train)
y_pred6 = DTR.predict(X_train)
y_pred7 = KNN.predict(X_train)
y_pred8 = SVR.predict(X_train)
y_pred9 = GBR.predict(X_train)

Prediction = pd.DataFrame({'Actual':Y_train,'LR':y_pred1,
                  'XGBR':y_pred2,'LASSO':y_pred3,'RFR':y_pred4,'RR':y_pred5,'DTR':y_pred6,'KNN':y_pred7,'SVR':y_pred8,'GBR':y_pred9})

Prediction

"""### Prediction on Test Data

---


"""

y_pred1 = LR.predict(X_test)
y_pred2 = XGBR.predict(X_test)
y_pred3 = LASSO.predict(X_test)
y_pred4 = RFR.predict(X_test)
y_pred5 = RR.predict(X_test)
y_pred6 = DTR.predict(X_test)
y_pred7 = KNN.predict(X_test)
y_pred8 = SVR.predict(X_test)
y_pred9 = GBR.predict(X_test)

Prediction = pd.DataFrame({'Actual':Y_test,'LR':y_pred1,
                  'XGBR':y_pred2,'LASSO':y_pred3,'RFR':y_pred4,'RR':y_pred5,'DTR':y_pred6,'KNN':y_pred7,'SVR':y_pred8,'GBR':y_pred9})

Prediction

"""### Compare Performance Visually

---


"""

import matplotlib.pyplot as plt

sns.set_palette("RdBu")
plt.scatter(Y_test, LR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("LR")
plt.show()
plt.scatter(Y_test, XGBR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("XGBR")
plt.show()
plt.scatter(Y_test, LASSO_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("LASSO")
plt.show()
plt.scatter(Y_test, RFR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("RFR")
plt.show()
plt.scatter(Y_test, RR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("RR")
plt.show()
plt.scatter(Y_test, DTR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("DTR")
plt.show()
plt.scatter(Y_test, KNN_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("KNN")
plt.show()
plt.scatter(Y_test, SVR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("SVR")
plt.show()
plt.scatter(Y_test, GBR_test_data_prediction)
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("GBR")
plt.show()

"""### Building a Predictive System

---


"""

age = input("Enter your age: ")
sex = input("Enter 0 for male and 1 for Female: ")
bmi = input("Enter your BMI rate: ")
child = input("Number of your children: ")
smoke = input("Enter 0 for smoker and 1 for non smoker: ")
region = input("Enter 0 for southeast, 1 for southwest, 2 for northeast, and 3 for northwest: ")
input_data = (age,sex,bmi,child,smoke,region)
# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array\
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

a = LR.predict(input_data_reshaped)
b = RR.predict(input_data_reshaped)
c = LASSO.predict(input_data_reshaped)
d = RFR.predict(input_data_reshaped)
e = DTR.predict(input_data_reshaped)
f = KNN.predict(input_data_reshaped)
g = SVR.predict(input_data_reshaped)
h = GBR.predict(input_data_reshaped)


print('Using LR the insurance cost is USD ', a[0])
print('Using RR insurance cost is USD ', b[0])
print('Using LASSO insurance cost is USD ', c[0])
print('Using RFR insurance cost is USD ', d[0])
print('Using DTR the insurance cost is USD ', e[0])
print('Using KNN insurance cost is USD ', f[0])
print('Using SVR insurance cost is USD ', g[0])
print('Using GBR insurance cost is USD ', h[0])

#print('The insurance cost is USD ', prediction[0])

"""prediction = GBR.predict(input_data_reshaped)

for i in range(len(Predict)):
    prediction = Predict[0].predict(input_data_reshaped)
    print('The insurance cost is USD ', prediction[0])
"""